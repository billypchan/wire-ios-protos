//
// Wire
// Copyright (C) 2019 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Messages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ZMMessagesRoot

@implementation ZMMessagesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ZMMessagesRoot_FileDescriptor

static GPBFileDescriptor *ZMMessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                 objcPrefix:@"ZM"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum ZMClientAction

GPBEnumDescriptor *ZMClientAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ResetSession\000";
    static const int32_t values[] = {
        ZMClientAction_ResetSession,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ZMClientAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ZMClientAction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ZMClientAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case ZMClientAction_ResetSession:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ZMEncryptionAlgorithm

GPBEnumDescriptor *ZMEncryptionAlgorithm_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AesCbc\000AesGcm\000";
    static const int32_t values[] = {
        ZMEncryptionAlgorithm_AesCbc,
        ZMEncryptionAlgorithm_AesGcm,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ZMEncryptionAlgorithm)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ZMEncryptionAlgorithm_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ZMEncryptionAlgorithm_IsValidValue(int32_t value__) {
  switch (value__) {
    case ZMEncryptionAlgorithm_AesCbc:
    case ZMEncryptionAlgorithm_AesGcm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ZMGenericMessage

@implementation ZMGenericMessage

@dynamic contentOneOfCase;
@dynamic hasMessageId, messageId;
@dynamic text;
@dynamic image;
@dynamic knock;
@dynamic lastRead;
@dynamic cleared;
@dynamic external;
@dynamic clientAction;
@dynamic calling;
@dynamic asset;
@dynamic hidden;
@dynamic location;
@dynamic deleted;
@dynamic edited;
@dynamic confirmation;
@dynamic reaction;
@dynamic ephemeral;
@dynamic availability;

typedef struct ZMGenericMessage__storage_ {
  uint32_t _has_storage_[2];
  ZMClientAction clientAction;
  NSString *messageId;
  ZMText *text;
  ZMImageAsset *image;
  ZMKnock *knock;
  ZMLastRead *lastRead;
  ZMCleared *cleared;
  ZMExternal *external;
  ZMCalling *calling;
  ZMAsset *asset;
  ZMMessageHide *hidden;
  ZMLocation *location;
  ZMMessageDelete *deleted;
  ZMMessageEdit *edited;
  ZMConfirmation *confirmation;
  ZMReaction *reaction;
  ZMEphemeral *ephemeral;
  ZMAvailability *availability;
} ZMGenericMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = ZMGenericMessage_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, messageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMText),
        .number = ZMGenericMessage_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMImageAsset),
        .number = ZMGenericMessage_FieldNumber_Image,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "knock",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMKnock),
        .number = ZMGenericMessage_FieldNumber_Knock,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, knock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastRead",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMLastRead),
        .number = ZMGenericMessage_FieldNumber_LastRead,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, lastRead),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cleared",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMCleared),
        .number = ZMGenericMessage_FieldNumber_Cleared,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, cleared),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "external",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMExternal),
        .number = ZMGenericMessage_FieldNumber_External,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, external),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientAction",
        .dataTypeSpecific.enumDescFunc = ZMClientAction_EnumDescriptor,
        .number = ZMGenericMessage_FieldNumber_ClientAction,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, clientAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "calling",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMCalling),
        .number = ZMGenericMessage_FieldNumber_Calling,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, calling),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "asset",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset),
        .number = ZMGenericMessage_FieldNumber_Asset,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, asset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hidden",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMMessageHide),
        .number = ZMGenericMessage_FieldNumber_Hidden,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, hidden),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMLocation),
        .number = ZMGenericMessage_FieldNumber_Location,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deleted",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMMessageDelete),
        .number = ZMGenericMessage_FieldNumber_Deleted,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, deleted),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "edited",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMMessageEdit),
        .number = ZMGenericMessage_FieldNumber_Edited,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, edited),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confirmation",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMConfirmation),
        .number = ZMGenericMessage_FieldNumber_Confirmation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, confirmation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reaction",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMReaction),
        .number = ZMGenericMessage_FieldNumber_Reaction,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, reaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ephemeral",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMEphemeral),
        .number = ZMGenericMessage_FieldNumber_Ephemeral,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, ephemeral),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "availability",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAvailability),
        .number = ZMGenericMessage_FieldNumber_Availability,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMGenericMessage__storage_, availability),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMGenericMessage class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMGenericMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "content",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\010\000\t\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMGenericMessage_ClearContentOneOfCase(ZMGenericMessage *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ZMAvailability

@implementation ZMAvailability

@dynamic hasType, type;

typedef struct ZMAvailability__storage_ {
  uint32_t _has_storage_[1];
  ZMAvailability_Type type;
} ZMAvailability__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ZMAvailability_Type_EnumDescriptor,
        .number = ZMAvailability_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAvailability__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAvailability class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAvailability__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ZMAvailability_Type

GPBEnumDescriptor *ZMAvailability_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Available\000Away\000Busy\000";
    static const int32_t values[] = {
        ZMAvailability_Type_None,
        ZMAvailability_Type_Available,
        ZMAvailability_Type_Away,
        ZMAvailability_Type_Busy,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ZMAvailability_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ZMAvailability_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ZMAvailability_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case ZMAvailability_Type_None:
    case ZMAvailability_Type_Available:
    case ZMAvailability_Type_Away:
    case ZMAvailability_Type_Busy:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ZMEphemeral

@implementation ZMEphemeral

@dynamic contentOneOfCase;
@dynamic hasExpireAfterMillis, expireAfterMillis;
@dynamic text;
@dynamic image;
@dynamic knock;
@dynamic asset;
@dynamic location;

typedef struct ZMEphemeral__storage_ {
  uint32_t _has_storage_[2];
  ZMText *text;
  ZMImageAsset *image;
  ZMKnock *knock;
  ZMAsset *asset;
  ZMLocation *location;
  int64_t expireAfterMillis;
} ZMEphemeral__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expireAfterMillis",
        .dataTypeSpecific.className = NULL,
        .number = ZMEphemeral_FieldNumber_ExpireAfterMillis,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMEphemeral__storage_, expireAfterMillis),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMText),
        .number = ZMEphemeral_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMEphemeral__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMImageAsset),
        .number = ZMEphemeral_FieldNumber_Image,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMEphemeral__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "knock",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMKnock),
        .number = ZMEphemeral_FieldNumber_Knock,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMEphemeral__storage_, knock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "asset",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset),
        .number = ZMEphemeral_FieldNumber_Asset,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMEphemeral__storage_, asset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMLocation),
        .number = ZMEphemeral_FieldNumber_Location,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMEphemeral__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMEphemeral class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMEphemeral__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "content",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMEphemeral_ClearContentOneOfCase(ZMEphemeral *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ZMText

@implementation ZMText

@dynamic hasContent, content;
@dynamic linkPreviewArray, linkPreviewArray_Count;
@dynamic mentionsArray, mentionsArray_Count;
@dynamic hasQuote, quote;
@dynamic hasExpectsReadConfirmation, expectsReadConfirmation;
@dynamic hasSentToLegalHold, sentToLegalHold;

typedef struct ZMText__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  NSMutableArray *linkPreviewArray;
  NSMutableArray *mentionsArray;
  ZMQuote *quote;
} ZMText__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = ZMText_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMText__storage_, content),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "linkPreviewArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMLinkPreview),
        .number = ZMText_FieldNumber_LinkPreviewArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ZMText__storage_, linkPreviewArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mentionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMMention),
        .number = ZMText_FieldNumber_MentionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ZMText__storage_, mentionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quote",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMQuote),
        .number = ZMText_FieldNumber_Quote,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMText__storage_, quote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expectsReadConfirmation",
        .dataTypeSpecific.className = NULL,
        .number = ZMText_FieldNumber_ExpectsReadConfirmation,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sentToLegalHold",
        .dataTypeSpecific.className = NULL,
        .number = ZMText_FieldNumber_SentToLegalHold,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMText class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMText__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMKnock

@implementation ZMKnock

@dynamic hasHotKnock, hotKnock;
@dynamic hasExpectsReadConfirmation, expectsReadConfirmation;
@dynamic hasSentToLegalHold, sentToLegalHold;

typedef struct ZMKnock__storage_ {
  uint32_t _has_storage_[1];
} ZMKnock__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hotKnock",
        .dataTypeSpecific.className = NULL,
        .number = ZMKnock_FieldNumber_HotKnock,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "expectsReadConfirmation",
        .dataTypeSpecific.className = NULL,
        .number = ZMKnock_FieldNumber_ExpectsReadConfirmation,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sentToLegalHold",
        .dataTypeSpecific.className = NULL,
        .number = ZMKnock_FieldNumber_SentToLegalHold,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMKnock class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMKnock__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMLinkPreview

@implementation ZMLinkPreview

@dynamic previewOneOfCase;
@dynamic metaDataOneOfCase;
@dynamic hasURL, URL;
@dynamic hasURLOffset, URLOffset;
@dynamic article;
@dynamic hasPermanentURL, permanentURL;
@dynamic hasTitle, title;
@dynamic hasSummary, summary;
@dynamic hasImage, image;
@dynamic tweet;

typedef struct ZMLinkPreview__storage_ {
  uint32_t _has_storage_[3];
  int32_t URLOffset;
  NSString *URL;
  ZMArticle *article;
  NSString *permanentURL;
  NSString *title;
  NSString *summary;
  ZMAsset *image;
  ZMTweet *tweet;
} ZMLinkPreview__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = ZMLinkPreview_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URLOffset",
        .dataTypeSpecific.className = NULL,
        .number = ZMLinkPreview_FieldNumber_URLOffset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, URLOffset),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "article",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMArticle),
        .number = ZMLinkPreview_FieldNumber_Article,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, article),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "permanentURL",
        .dataTypeSpecific.className = NULL,
        .number = ZMLinkPreview_FieldNumber_PermanentURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, permanentURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = ZMLinkPreview_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "summary",
        .dataTypeSpecific.className = NULL,
        .number = ZMLinkPreview_FieldNumber_Summary,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, summary),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset),
        .number = ZMLinkPreview_FieldNumber_Image,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tweet",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMTweet),
        .number = ZMLinkPreview_FieldNumber_Tweet,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(ZMLinkPreview__storage_, tweet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMLinkPreview class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMLinkPreview__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "preview",
      "metaData",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001!!!\000\002!!!\246\000\005\t\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMLinkPreview_ClearPreviewOneOfCase(ZMLinkPreview *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
void ZMLinkPreview_ClearMetaDataOneOfCase(ZMLinkPreview *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBMaybeClearOneof(message, oneof, -2, 0);
}
#pragma mark - ZMTweet

@implementation ZMTweet

@dynamic hasAuthor, author;
@dynamic hasUsername, username;

typedef struct ZMTweet__storage_ {
  uint32_t _has_storage_[1];
  NSString *author;
  NSString *username;
} ZMTweet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "author",
        .dataTypeSpecific.className = NULL,
        .number = ZMTweet_FieldNumber_Author,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMTweet__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = ZMTweet_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMTweet__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMTweet class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMTweet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMArticle

@implementation ZMArticle

@dynamic hasPermanentURL, permanentURL;
@dynamic hasTitle, title;
@dynamic hasSummary, summary;
@dynamic hasImage, image;

typedef struct ZMArticle__storage_ {
  uint32_t _has_storage_[1];
  NSString *permanentURL;
  NSString *title;
  NSString *summary;
  ZMAsset *image;
} ZMArticle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "permanentURL",
        .dataTypeSpecific.className = NULL,
        .number = ZMArticle_FieldNumber_PermanentURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMArticle__storage_, permanentURL),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = ZMArticle_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMArticle__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "summary",
        .dataTypeSpecific.className = NULL,
        .number = ZMArticle_FieldNumber_Summary,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMArticle__storage_, summary),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset),
        .number = ZMArticle_FieldNumber_Image,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ZMArticle__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMArticle class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMArticle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMMention

@implementation ZMMention

@dynamic mentionTypeOneOfCase;
@dynamic hasStart, start;
@dynamic hasLength, length;
@dynamic userId;

typedef struct ZMMention__storage_ {
  uint32_t _has_storage_[2];
  int32_t start;
  int32_t length;
  NSString *userId;
} ZMMention__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.className = NULL,
        .number = ZMMention_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMMention__storage_, start),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "length",
        .dataTypeSpecific.className = NULL,
        .number = ZMMention_FieldNumber_Length,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMMention__storage_, length),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = ZMMention_FieldNumber_UserId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMMention__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMMention class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMMention__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "mentionType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMMention_ClearMentionTypeOneOfCase(ZMMention *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ZMLastRead

@implementation ZMLastRead

@dynamic hasConversationId, conversationId;
@dynamic hasLastReadTimestamp, lastReadTimestamp;

typedef struct ZMLastRead__storage_ {
  uint32_t _has_storage_[1];
  NSString *conversationId;
  int64_t lastReadTimestamp;
} ZMLastRead__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversationId",
        .dataTypeSpecific.className = NULL,
        .number = ZMLastRead_FieldNumber_ConversationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMLastRead__storage_, conversationId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastReadTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = ZMLastRead_FieldNumber_LastReadTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMLastRead__storage_, lastReadTimestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMLastRead class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMLastRead__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMCleared

@implementation ZMCleared

@dynamic hasConversationId, conversationId;
@dynamic hasClearedTimestamp, clearedTimestamp;

typedef struct ZMCleared__storage_ {
  uint32_t _has_storage_[1];
  NSString *conversationId;
  int64_t clearedTimestamp;
} ZMCleared__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversationId",
        .dataTypeSpecific.className = NULL,
        .number = ZMCleared_FieldNumber_ConversationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMCleared__storage_, conversationId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clearedTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = ZMCleared_FieldNumber_ClearedTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMCleared__storage_, clearedTimestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMCleared class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMCleared__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMMessageHide

@implementation ZMMessageHide

@dynamic hasConversationId, conversationId;
@dynamic hasMessageId, messageId;

typedef struct ZMMessageHide__storage_ {
  uint32_t _has_storage_[1];
  NSString *conversationId;
  NSString *messageId;
} ZMMessageHide__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversationId",
        .dataTypeSpecific.className = NULL,
        .number = ZMMessageHide_FieldNumber_ConversationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMMessageHide__storage_, conversationId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = ZMMessageHide_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMMessageHide__storage_, messageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMMessageHide class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMMessageHide__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMMessageDelete

@implementation ZMMessageDelete

@dynamic hasMessageId, messageId;

typedef struct ZMMessageDelete__storage_ {
  uint32_t _has_storage_[1];
  NSString *messageId;
} ZMMessageDelete__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = ZMMessageDelete_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMMessageDelete__storage_, messageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMMessageDelete class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMMessageDelete__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMMessageEdit

@implementation ZMMessageEdit

@dynamic contentOneOfCase;
@dynamic hasReplacingMessageId, replacingMessageId;
@dynamic text;

typedef struct ZMMessageEdit__storage_ {
  uint32_t _has_storage_[2];
  NSString *replacingMessageId;
  ZMText *text;
} ZMMessageEdit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "replacingMessageId",
        .dataTypeSpecific.className = NULL,
        .number = ZMMessageEdit_FieldNumber_ReplacingMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMMessageEdit__storage_, replacingMessageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMText),
        .number = ZMMessageEdit_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMMessageEdit__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMMessageEdit class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMMessageEdit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "content",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMMessageEdit_ClearContentOneOfCase(ZMMessageEdit *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ZMQuote

@implementation ZMQuote

@dynamic hasQuotedMessageId, quotedMessageId;
@dynamic hasQuotedMessageSha256, quotedMessageSha256;

typedef struct ZMQuote__storage_ {
  uint32_t _has_storage_[1];
  NSString *quotedMessageId;
  NSData *quotedMessageSha256;
} ZMQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quotedMessageId",
        .dataTypeSpecific.className = NULL,
        .number = ZMQuote_FieldNumber_QuotedMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMQuote__storage_, quotedMessageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quotedMessageSha256",
        .dataTypeSpecific.className = NULL,
        .number = ZMQuote_FieldNumber_QuotedMessageSha256,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMQuote__storage_, quotedMessageSha256),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMQuote class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMQuote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMConfirmation

@implementation ZMConfirmation

@dynamic hasType, type;
@dynamic hasFirstMessageId, firstMessageId;
@dynamic moreMessageIdsArray, moreMessageIdsArray_Count;

typedef struct ZMConfirmation__storage_ {
  uint32_t _has_storage_[1];
  ZMConfirmation_Type type;
  NSString *firstMessageId;
  NSMutableArray *moreMessageIdsArray;
} ZMConfirmation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "firstMessageId",
        .dataTypeSpecific.className = NULL,
        .number = ZMConfirmation_FieldNumber_FirstMessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMConfirmation__storage_, firstMessageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ZMConfirmation_Type_EnumDescriptor,
        .number = ZMConfirmation_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMConfirmation__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "moreMessageIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = ZMConfirmation_FieldNumber_MoreMessageIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ZMConfirmation__storage_, moreMessageIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMConfirmation class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMConfirmation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ZMConfirmation_Type

GPBEnumDescriptor *ZMConfirmation_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Delivered\000Read\000";
    static const int32_t values[] = {
        ZMConfirmation_Type_Delivered,
        ZMConfirmation_Type_Read,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ZMConfirmation_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ZMConfirmation_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ZMConfirmation_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case ZMConfirmation_Type_Delivered:
    case ZMConfirmation_Type_Read:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ZMLocation

@implementation ZMLocation

@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasName, name;
@dynamic hasZoom, zoom;
@dynamic hasExpectsReadConfirmation, expectsReadConfirmation;
@dynamic hasSentToLegalHold, sentToLegalHold;

typedef struct ZMLocation__storage_ {
  uint32_t _has_storage_[1];
  float longitude;
  float latitude;
  int32_t zoom;
  NSString *name;
} ZMLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = ZMLocation_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMLocation__storage_, longitude),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = ZMLocation_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMLocation__storage_, latitude),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ZMLocation_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMLocation__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zoom",
        .dataTypeSpecific.className = NULL,
        .number = ZMLocation_FieldNumber_Zoom,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ZMLocation__storage_, zoom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expectsReadConfirmation",
        .dataTypeSpecific.className = NULL,
        .number = ZMLocation_FieldNumber_ExpectsReadConfirmation,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sentToLegalHold",
        .dataTypeSpecific.className = NULL,
        .number = ZMLocation_FieldNumber_SentToLegalHold,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMLocation class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMLocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMImageAsset

@implementation ZMImageAsset

@dynamic hasTag, tag;
@dynamic hasWidth, width;
@dynamic hasHeight, height;
@dynamic hasOriginalWidth, originalWidth;
@dynamic hasOriginalHeight, originalHeight;
@dynamic hasMimeType, mimeType;
@dynamic hasSize, size;
@dynamic hasOtrKey, otrKey;
@dynamic hasMacKey, macKey;
@dynamic hasMac, mac;
@dynamic hasSha256, sha256;

typedef struct ZMImageAsset__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  int32_t originalWidth;
  int32_t originalHeight;
  int32_t size;
  NSString *tag;
  NSString *mimeType;
  NSData *otrKey;
  NSData *macKey;
  NSData *mac;
  NSData *sha256;
} ZMImageAsset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_Tag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, tag),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, width),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, height),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "originalWidth",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_OriginalWidth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, originalWidth),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "originalHeight",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_OriginalHeight,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, originalHeight),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_MimeType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, mimeType),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_Size,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, size),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "otrKey",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_OtrKey,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, otrKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "macKey",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_MacKey,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, macKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "mac",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_Mac,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, mac),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sha256",
        .dataTypeSpecific.className = NULL,
        .number = ZMImageAsset_FieldNumber_Sha256,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ZMImageAsset__storage_, sha256),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMImageAsset class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMImageAsset__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMAsset

@implementation ZMAsset

@dynamic statusOneOfCase;
@dynamic hasOriginal, original;
@dynamic notUploaded;
@dynamic uploaded;
@dynamic hasPreview, preview;
@dynamic hasExpectsReadConfirmation, expectsReadConfirmation;
@dynamic hasSentToLegalHold, sentToLegalHold;

typedef struct ZMAsset__storage_ {
  uint32_t _has_storage_[2];
  ZMAsset_NotUploaded notUploaded;
  ZMAsset_Original *original;
  ZMAsset_RemoteData *uploaded;
  ZMAsset_Preview *preview;
} ZMAsset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "original",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_Original),
        .number = ZMAsset_FieldNumber_Original,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAsset__storage_, original),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notUploaded",
        .dataTypeSpecific.enumDescFunc = ZMAsset_NotUploaded_EnumDescriptor,
        .number = ZMAsset_FieldNumber_NotUploaded,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMAsset__storage_, notUploaded),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "uploaded",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_RemoteData),
        .number = ZMAsset_FieldNumber_Uploaded,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMAsset__storage_, uploaded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "preview",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_Preview),
        .number = ZMAsset_FieldNumber_Preview,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMAsset__storage_, preview),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expectsReadConfirmation",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_FieldNumber_ExpectsReadConfirmation,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sentToLegalHold",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_FieldNumber_SentToLegalHold,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAsset class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAsset__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "status",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMAsset_ClearStatusOneOfCase(ZMAsset *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum ZMAsset_NotUploaded

GPBEnumDescriptor *ZMAsset_NotUploaded_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Cancelled\000Failed\000";
    static const int32_t values[] = {
        ZMAsset_NotUploaded_Cancelled,
        ZMAsset_NotUploaded_Failed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ZMAsset_NotUploaded)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ZMAsset_NotUploaded_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ZMAsset_NotUploaded_IsValidValue(int32_t value__) {
  switch (value__) {
    case ZMAsset_NotUploaded_Cancelled:
    case ZMAsset_NotUploaded_Failed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ZMAsset_Original

@implementation ZMAsset_Original

@dynamic metaDataOneOfCase;
@dynamic hasMimeType, mimeType;
@dynamic hasSize, size;
@dynamic hasName, name;
@dynamic image;
@dynamic video;
@dynamic audio;
@dynamic hasSource, source;
@dynamic hasCaption, caption;

typedef struct ZMAsset_Original__storage_ {
  uint32_t _has_storage_[2];
  NSString *mimeType;
  NSString *name;
  ZMAsset_ImageMetaData *image;
  ZMAsset_VideoMetaData *video;
  ZMAsset_AudioMetaData *audio;
  NSString *source;
  NSString *caption;
  uint64_t size;
} ZMAsset_Original__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_Original_FieldNumber_MimeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, mimeType),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_Original_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, size),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_Original_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_ImageMetaData),
        .number = ZMAsset_Original_FieldNumber_Image,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "video",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_VideoMetaData),
        .number = ZMAsset_Original_FieldNumber_Video,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, video),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audio",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_AudioMetaData),
        .number = ZMAsset_Original_FieldNumber_Audio,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_Original_FieldNumber_Source,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "caption",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_Original_FieldNumber_Caption,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ZMAsset_Original__storage_, caption),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAsset_Original class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAsset_Original__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "metaData",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ZMAsset)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMAsset_Original_ClearMetaDataOneOfCase(ZMAsset_Original *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ZMAsset_Preview

@implementation ZMAsset_Preview

@dynamic metaDataOneOfCase;
@dynamic hasMimeType, mimeType;
@dynamic hasSize, size;
@dynamic hasRemote, remote;
@dynamic image;

typedef struct ZMAsset_Preview__storage_ {
  uint32_t _has_storage_[2];
  NSString *mimeType;
  ZMAsset_RemoteData *remote;
  ZMAsset_ImageMetaData *image;
  uint64_t size;
} ZMAsset_Preview__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_Preview_FieldNumber_MimeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAsset_Preview__storage_, mimeType),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_Preview_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMAsset_Preview__storage_, size),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "remote",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_RemoteData),
        .number = ZMAsset_Preview_FieldNumber_Remote,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMAsset_Preview__storage_, remote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMAsset_ImageMetaData),
        .number = ZMAsset_Preview_FieldNumber_Image,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ZMAsset_Preview__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAsset_Preview class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAsset_Preview__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "metaData",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ZMAsset)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ZMAsset_Preview_ClearMetaDataOneOfCase(ZMAsset_Preview *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ZMAsset_ImageMetaData

@implementation ZMAsset_ImageMetaData

@dynamic hasWidth, width;
@dynamic hasHeight, height;
@dynamic hasTag, tag;

typedef struct ZMAsset_ImageMetaData__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  NSString *tag;
} ZMAsset_ImageMetaData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_ImageMetaData_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAsset_ImageMetaData__storage_, width),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_ImageMetaData_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMAsset_ImageMetaData__storage_, height),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tag",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_ImageMetaData_FieldNumber_Tag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMAsset_ImageMetaData__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAsset_ImageMetaData class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAsset_ImageMetaData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ZMAsset)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMAsset_VideoMetaData

@implementation ZMAsset_VideoMetaData

@dynamic hasWidth, width;
@dynamic hasHeight, height;
@dynamic hasDurationInMillis, durationInMillis;

typedef struct ZMAsset_VideoMetaData__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  uint64_t durationInMillis;
} ZMAsset_VideoMetaData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_VideoMetaData_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAsset_VideoMetaData__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_VideoMetaData_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMAsset_VideoMetaData__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "durationInMillis",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_VideoMetaData_FieldNumber_DurationInMillis,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMAsset_VideoMetaData__storage_, durationInMillis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAsset_VideoMetaData class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAsset_VideoMetaData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ZMAsset)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMAsset_AudioMetaData

@implementation ZMAsset_AudioMetaData

@dynamic hasDurationInMillis, durationInMillis;
@dynamic hasNormalizedLoudness, normalizedLoudness;

typedef struct ZMAsset_AudioMetaData__storage_ {
  uint32_t _has_storage_[1];
  NSData *normalizedLoudness;
  uint64_t durationInMillis;
} ZMAsset_AudioMetaData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "durationInMillis",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_AudioMetaData_FieldNumber_DurationInMillis,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAsset_AudioMetaData__storage_, durationInMillis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "normalizedLoudness",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_AudioMetaData_FieldNumber_NormalizedLoudness,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMAsset_AudioMetaData__storage_, normalizedLoudness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAsset_AudioMetaData class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAsset_AudioMetaData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ZMAsset)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMAsset_RemoteData

@implementation ZMAsset_RemoteData

@dynamic hasOtrKey, otrKey;
@dynamic hasSha256, sha256;
@dynamic hasAssetId, assetId;
@dynamic hasAssetToken, assetToken;
@dynamic hasEncryption, encryption;

typedef struct ZMAsset_RemoteData__storage_ {
  uint32_t _has_storage_[1];
  ZMEncryptionAlgorithm encryption;
  NSData *otrKey;
  NSData *sha256;
  NSString *assetId;
  NSString *assetToken;
} ZMAsset_RemoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "otrKey",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_RemoteData_FieldNumber_OtrKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMAsset_RemoteData__storage_, otrKey),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sha256",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_RemoteData_FieldNumber_Sha256,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMAsset_RemoteData__storage_, sha256),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "assetId",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_RemoteData_FieldNumber_AssetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMAsset_RemoteData__storage_, assetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assetToken",
        .dataTypeSpecific.className = NULL,
        .number = ZMAsset_RemoteData_FieldNumber_AssetToken,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ZMAsset_RemoteData__storage_, assetToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encryption",
        .dataTypeSpecific.enumDescFunc = ZMEncryptionAlgorithm_EnumDescriptor,
        .number = ZMAsset_RemoteData_FieldNumber_Encryption,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ZMAsset_RemoteData__storage_, encryption),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMAsset_RemoteData class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMAsset_RemoteData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ZMAsset)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMExternal

@implementation ZMExternal

@dynamic hasOtrKey, otrKey;
@dynamic hasSha256, sha256;
@dynamic hasEncryption, encryption;

typedef struct ZMExternal__storage_ {
  uint32_t _has_storage_[1];
  ZMEncryptionAlgorithm encryption;
  NSData *otrKey;
  NSData *sha256;
} ZMExternal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "otrKey",
        .dataTypeSpecific.className = NULL,
        .number = ZMExternal_FieldNumber_OtrKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMExternal__storage_, otrKey),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sha256",
        .dataTypeSpecific.className = NULL,
        .number = ZMExternal_FieldNumber_Sha256,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMExternal__storage_, sha256),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "encryption",
        .dataTypeSpecific.enumDescFunc = ZMEncryptionAlgorithm_EnumDescriptor,
        .number = ZMExternal_FieldNumber_Encryption,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZMExternal__storage_, encryption),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMExternal class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMExternal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMReaction

@implementation ZMReaction

@dynamic hasEmoji, emoji;
@dynamic hasMessageId, messageId;

typedef struct ZMReaction__storage_ {
  uint32_t _has_storage_[1];
  NSString *emoji;
  NSString *messageId;
} ZMReaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "emoji",
        .dataTypeSpecific.className = NULL,
        .number = ZMReaction_FieldNumber_Emoji,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMReaction__storage_, emoji),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = ZMReaction_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMReaction__storage_, messageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMReaction class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMReaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMCalling

@implementation ZMCalling

@dynamic hasContent, content;

typedef struct ZMCalling__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
} ZMCalling__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = ZMCalling_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMCalling__storage_, content),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMCalling class]
                                     rootClass:[ZMMessagesRoot class]
                                          file:ZMMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMCalling__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
