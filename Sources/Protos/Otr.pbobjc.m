//
// Wire
// Copyright (C) 2019 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: otr.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Otr.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ZMOtrRoot

@implementation ZMOtrRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ZMOtrRoot_FileDescriptor

static GPBFileDescriptor *ZMOtrRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                 objcPrefix:@"ZM"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ZMUserId

@implementation ZMUserId

@dynamic hasUuid, uuid;

typedef struct ZMUserId__storage_ {
  uint32_t _has_storage_[1];
  NSData *uuid;
} ZMUserId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = ZMUserId_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMUserId__storage_, uuid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMUserId class]
                                     rootClass:[ZMOtrRoot class]
                                          file:ZMOtrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMUserId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMClientId

@implementation ZMClientId

@dynamic hasClient, client;

typedef struct ZMClientId__storage_ {
  uint32_t _has_storage_[1];
  uint64_t client;
} ZMClientId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.className = NULL,
        .number = ZMClientId_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMClientId__storage_, client),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMClientId class]
                                     rootClass:[ZMOtrRoot class]
                                          file:ZMOtrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMClientId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMClientEntry

@implementation ZMClientEntry

@dynamic hasClient, client;
@dynamic hasText, text;

typedef struct ZMClientEntry__storage_ {
  uint32_t _has_storage_[1];
  ZMClientId *client;
  NSData *text;
} ZMClientEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMClientId),
        .number = ZMClientEntry_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMClientEntry__storage_, client),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = ZMClientEntry_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZMClientEntry__storage_, text),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMClientEntry class]
                                     rootClass:[ZMOtrRoot class]
                                          file:ZMOtrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMClientEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMUserEntry

@implementation ZMUserEntry

@dynamic hasUser, user;
@dynamic clientsArray, clientsArray_Count;

typedef struct ZMUserEntry__storage_ {
  uint32_t _has_storage_[1];
  ZMUserId *user;
  NSMutableArray *clientsArray;
} ZMUserEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMUserId),
        .number = ZMUserEntry_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZMUserEntry__storage_, user),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ZMClientEntry),
        .number = ZMUserEntry_FieldNumber_ClientsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ZMUserEntry__storage_, clientsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMUserEntry class]
                                     rootClass:[ZMOtrRoot class]
                                          file:ZMOtrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZMUserEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMNewOtrMessage

@implementation ZMNewOtrMessage

@dynamic hasSender, sender;
@dynamic recipientsArray, recipientsArray_Count;
@dynamic hasNativePush, nativePush;
@dynamic hasBlob, blob;

typedef struct ZMNewOtrMessage__storage_ {
  uint32_t _has_storage_[1];
  ZMClientId *sender;
  NSMutableArray *recipientsArray;
  NSData *blob;
} ZMNewOtrMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueMessage = nil,
        .core.name = "sender",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ZMClientId),
        .core.number = ZMNewOtrMessage_FieldNumber_Sender,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ZMNewOtrMessage__storage_, sender),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "recipientsArray",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ZMUserEntry),
        .core.number = ZMNewOtrMessage_FieldNumber_RecipientsArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ZMNewOtrMessage__storage_, recipientsArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "nativePush",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ZMNewOtrMessage_FieldNumber_NativePush,
        .core.hasIndex = 1,
        .core.offset = 2,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "blob",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ZMNewOtrMessage_FieldNumber_Blob,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(ZMNewOtrMessage__storage_, blob),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMNewOtrMessage class]
                                     rootClass:[ZMOtrRoot class]
                                          file:ZMOtrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ZMNewOtrMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZMOtrAssetMeta

@implementation ZMOtrAssetMeta

@dynamic hasSender, sender;
@dynamic recipientsArray, recipientsArray_Count;
@dynamic hasIsInline, isInline;
@dynamic hasNativePush, nativePush;

typedef struct ZMOtrAssetMeta__storage_ {
  uint32_t _has_storage_[1];
  ZMClientId *sender;
  NSMutableArray *recipientsArray;
} ZMOtrAssetMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueMessage = nil,
        .core.name = "sender",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ZMClientId),
        .core.number = ZMOtrAssetMeta_FieldNumber_Sender,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ZMOtrAssetMeta__storage_, sender),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "recipientsArray",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ZMUserEntry),
        .core.number = ZMOtrAssetMeta_FieldNumber_RecipientsArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ZMOtrAssetMeta__storage_, recipientsArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "isInline",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ZMOtrAssetMeta_FieldNumber_IsInline,
        .core.hasIndex = 1,
        .core.offset = 2,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "nativePush",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ZMOtrAssetMeta_FieldNumber_NativePush,
        .core.hasIndex = 3,
        .core.offset = 4,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZMOtrAssetMeta class]
                                     rootClass:[ZMOtrRoot class]
                                          file:ZMOtrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ZMOtrAssetMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
