//
// Wire
// Copyright (C) 2019 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ZMArticle;
@class ZMAsset;
@class ZMAsset_AudioMetaData;
@class ZMAsset_ImageMetaData;
@class ZMAsset_Original;
@class ZMAsset_Preview;
@class ZMAsset_RemoteData;
@class ZMAsset_VideoMetaData;
@class ZMAvailability;
@class ZMCalling;
@class ZMCleared;
@class ZMConfirmation;
@class ZMEphemeral;
@class ZMExternal;
@class ZMImageAsset;
@class ZMKnock;
@class ZMLastRead;
@class ZMLinkPreview;
@class ZMLocation;
@class ZMMention;
@class ZMMessageDelete;
@class ZMMessageEdit;
@class ZMMessageHide;
@class ZMQuote;
@class ZMReaction;
@class ZMText;
@class ZMTweet;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ZMClientAction

typedef GPB_ENUM(ZMClientAction) {
  ZMClientAction_ResetSession = 0,
};

GPBEnumDescriptor *ZMClientAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZMClientAction_IsValidValue(int32_t value);

#pragma mark - Enum ZMEncryptionAlgorithm

typedef GPB_ENUM(ZMEncryptionAlgorithm) {
  ZMEncryptionAlgorithm_AesCbc = 0,
  ZMEncryptionAlgorithm_AesGcm = 1,
};

GPBEnumDescriptor *ZMEncryptionAlgorithm_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZMEncryptionAlgorithm_IsValidValue(int32_t value);

#pragma mark - Enum ZMAvailability_Type

typedef GPB_ENUM(ZMAvailability_Type) {
  ZMAvailability_Type_None = 0,
  ZMAvailability_Type_Available = 1,
  ZMAvailability_Type_Away = 2,
  ZMAvailability_Type_Busy = 3,
};

GPBEnumDescriptor *ZMAvailability_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZMAvailability_Type_IsValidValue(int32_t value);

#pragma mark - Enum ZMConfirmation_Type

typedef GPB_ENUM(ZMConfirmation_Type) {
  ZMConfirmation_Type_Delivered = 0,
  ZMConfirmation_Type_Read = 1,
};

GPBEnumDescriptor *ZMConfirmation_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZMConfirmation_Type_IsValidValue(int32_t value);

#pragma mark - Enum ZMAsset_NotUploaded

typedef GPB_ENUM(ZMAsset_NotUploaded) {
  ZMAsset_NotUploaded_Cancelled = 0,
  ZMAsset_NotUploaded_Failed = 1,
};

GPBEnumDescriptor *ZMAsset_NotUploaded_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZMAsset_NotUploaded_IsValidValue(int32_t value);

#pragma mark - ZMMessagesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ZMMessagesRoot : GPBRootObject
@end

#pragma mark - ZMGenericMessage

typedef GPB_ENUM(ZMGenericMessage_FieldNumber) {
  ZMGenericMessage_FieldNumber_MessageId = 1,
  ZMGenericMessage_FieldNumber_Text = 2,
  ZMGenericMessage_FieldNumber_Image = 3,
  ZMGenericMessage_FieldNumber_Knock = 4,
  ZMGenericMessage_FieldNumber_LastRead = 6,
  ZMGenericMessage_FieldNumber_Cleared = 7,
  ZMGenericMessage_FieldNumber_External = 8,
  ZMGenericMessage_FieldNumber_ClientAction = 9,
  ZMGenericMessage_FieldNumber_Calling = 10,
  ZMGenericMessage_FieldNumber_Asset = 11,
  ZMGenericMessage_FieldNumber_Hidden = 12,
  ZMGenericMessage_FieldNumber_Location = 13,
  ZMGenericMessage_FieldNumber_Deleted = 14,
  ZMGenericMessage_FieldNumber_Edited = 15,
  ZMGenericMessage_FieldNumber_Confirmation = 16,
  ZMGenericMessage_FieldNumber_Reaction = 17,
  ZMGenericMessage_FieldNumber_Ephemeral = 18,
  ZMGenericMessage_FieldNumber_Availability = 19,
};

typedef GPB_ENUM(ZMGenericMessage_Content_OneOfCase) {
  ZMGenericMessage_Content_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMGenericMessage_Content_OneOfCase_Text = 2,
  ZMGenericMessage_Content_OneOfCase_Image = 3,
  ZMGenericMessage_Content_OneOfCase_Knock = 4,
  ZMGenericMessage_Content_OneOfCase_LastRead = 6,
  ZMGenericMessage_Content_OneOfCase_Cleared = 7,
  ZMGenericMessage_Content_OneOfCase_External = 8,
  ZMGenericMessage_Content_OneOfCase_ClientAction = 9,
  ZMGenericMessage_Content_OneOfCase_Calling = 10,
  ZMGenericMessage_Content_OneOfCase_Asset = 11,
  ZMGenericMessage_Content_OneOfCase_Hidden = 12,
  ZMGenericMessage_Content_OneOfCase_Location = 13,
  ZMGenericMessage_Content_OneOfCase_Deleted = 14,
  ZMGenericMessage_Content_OneOfCase_Edited = 15,
  ZMGenericMessage_Content_OneOfCase_Confirmation = 16,
  ZMGenericMessage_Content_OneOfCase_Reaction = 17,
  ZMGenericMessage_Content_OneOfCase_Ephemeral = 18,
  ZMGenericMessage_Content_OneOfCase_Availability = 19,
};

@interface ZMGenericMessage : GPBMessage

/** client generated random id, preferably UUID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageId;
/** Test to see if @c messageId has been set. */
@property(nonatomic, readwrite) BOOL hasMessageId;

@property(nonatomic, readonly) ZMGenericMessage_Content_OneOfCase contentOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ZMText *text;

/** deprecated in favour of Asset */
@property(nonatomic, readwrite, strong, null_resettable) ZMImageAsset *image;

@property(nonatomic, readwrite, strong, null_resettable) ZMKnock *knock;

@property(nonatomic, readwrite, strong, null_resettable) ZMLastRead *lastRead;

@property(nonatomic, readwrite, strong, null_resettable) ZMCleared *cleared;

@property(nonatomic, readwrite, strong, null_resettable) ZMExternal *external;

@property(nonatomic, readwrite) ZMClientAction clientAction;

@property(nonatomic, readwrite, strong, null_resettable) ZMCalling *calling;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset *asset;

@property(nonatomic, readwrite, strong, null_resettable) ZMMessageHide *hidden;

@property(nonatomic, readwrite, strong, null_resettable) ZMLocation *location;

@property(nonatomic, readwrite, strong, null_resettable) ZMMessageDelete *deleted;

@property(nonatomic, readwrite, strong, null_resettable) ZMMessageEdit *edited;

@property(nonatomic, readwrite, strong, null_resettable) ZMConfirmation *confirmation;

@property(nonatomic, readwrite, strong, null_resettable) ZMReaction *reaction;

@property(nonatomic, readwrite, strong, null_resettable) ZMEphemeral *ephemeral;

@property(nonatomic, readwrite, strong, null_resettable) ZMAvailability *availability;

@end

/**
 * Clears whatever value was set for the oneof 'content'.
 **/
void ZMGenericMessage_ClearContentOneOfCase(ZMGenericMessage *message);

#pragma mark - ZMAvailability

typedef GPB_ENUM(ZMAvailability_FieldNumber) {
  ZMAvailability_FieldNumber_Type = 1,
};

@interface ZMAvailability : GPBMessage

@property(nonatomic, readwrite) ZMAvailability_Type type;

@property(nonatomic, readwrite) BOOL hasType;
@end

#pragma mark - ZMEphemeral

typedef GPB_ENUM(ZMEphemeral_FieldNumber) {
  ZMEphemeral_FieldNumber_ExpireAfterMillis = 1,
  ZMEphemeral_FieldNumber_Text = 2,
  ZMEphemeral_FieldNumber_Image = 3,
  ZMEphemeral_FieldNumber_Knock = 4,
  ZMEphemeral_FieldNumber_Asset = 5,
  ZMEphemeral_FieldNumber_Location = 6,
};

typedef GPB_ENUM(ZMEphemeral_Content_OneOfCase) {
  ZMEphemeral_Content_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMEphemeral_Content_OneOfCase_Text = 2,
  ZMEphemeral_Content_OneOfCase_Image = 3,
  ZMEphemeral_Content_OneOfCase_Knock = 4,
  ZMEphemeral_Content_OneOfCase_Asset = 5,
  ZMEphemeral_Content_OneOfCase_Location = 6,
};

@interface ZMEphemeral : GPBMessage

@property(nonatomic, readwrite) int64_t expireAfterMillis;

@property(nonatomic, readwrite) BOOL hasExpireAfterMillis;
@property(nonatomic, readonly) ZMEphemeral_Content_OneOfCase contentOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ZMText *text;

/** deprecated in favour of Asset */
@property(nonatomic, readwrite, strong, null_resettable) ZMImageAsset *image;

@property(nonatomic, readwrite, strong, null_resettable) ZMKnock *knock;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset *asset;

@property(nonatomic, readwrite, strong, null_resettable) ZMLocation *location;

@end

/**
 * Clears whatever value was set for the oneof 'content'.
 **/
void ZMEphemeral_ClearContentOneOfCase(ZMEphemeral *message);

#pragma mark - ZMText

typedef GPB_ENUM(ZMText_FieldNumber) {
  ZMText_FieldNumber_Content = 1,
  ZMText_FieldNumber_LinkPreviewArray = 3,
  ZMText_FieldNumber_MentionsArray = 4,
  ZMText_FieldNumber_Quote = 5,
  ZMText_FieldNumber_ExpectsReadConfirmation = 6,
  ZMText_FieldNumber_SentToLegalHold = 7,
};

@interface ZMText : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *content;
/** Test to see if @c content has been set. */
@property(nonatomic, readwrite) BOOL hasContent;

/** reserved 2; // reserved keyword is not available in older protoc versions */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZMLinkPreview*> *linkPreviewArray;
/** The number of items in @c linkPreviewArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger linkPreviewArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZMMention*> *mentionsArray;
/** The number of items in @c mentionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger mentionsArray_Count;

/** if this Text is part of a MessageEdit, this field is ignored */
@property(nonatomic, readwrite, strong, null_resettable) ZMQuote *quote;
/** Test to see if @c quote has been set. */
@property(nonatomic, readwrite) BOOL hasQuote;

/** whether the sender is expecting to receive a read confirmation */
@property(nonatomic, readwrite) BOOL expectsReadConfirmation;

@property(nonatomic, readwrite) BOOL hasExpectsReadConfirmation;
/** whether a user in the conversation is under legal hold */
@property(nonatomic, readwrite) BOOL sentToLegalHold;

@property(nonatomic, readwrite) BOOL hasSentToLegalHold;
@end

#pragma mark - ZMKnock

typedef GPB_ENUM(ZMKnock_FieldNumber) {
  ZMKnock_FieldNumber_HotKnock = 1,
  ZMKnock_FieldNumber_ExpectsReadConfirmation = 2,
  ZMKnock_FieldNumber_SentToLegalHold = 3,
};

@interface ZMKnock : GPBMessage

@property(nonatomic, readwrite) BOOL hotKnock;

@property(nonatomic, readwrite) BOOL hasHotKnock;
/** whether the sender is expecting to receive a read confirmation */
@property(nonatomic, readwrite) BOOL expectsReadConfirmation;

@property(nonatomic, readwrite) BOOL hasExpectsReadConfirmation;
/** whether a user in the conversation is under legal hold */
@property(nonatomic, readwrite) BOOL sentToLegalHold;

@property(nonatomic, readwrite) BOOL hasSentToLegalHold;
@end

#pragma mark - ZMLinkPreview

typedef GPB_ENUM(ZMLinkPreview_FieldNumber) {
  ZMLinkPreview_FieldNumber_URL = 1,
  ZMLinkPreview_FieldNumber_URLOffset = 2,
  ZMLinkPreview_FieldNumber_Article = 3,
  ZMLinkPreview_FieldNumber_PermanentURL = 5,
  ZMLinkPreview_FieldNumber_Title = 6,
  ZMLinkPreview_FieldNumber_Summary = 7,
  ZMLinkPreview_FieldNumber_Image = 8,
  ZMLinkPreview_FieldNumber_Tweet = 9,
};

typedef GPB_ENUM(ZMLinkPreview_Preview_OneOfCase) {
  ZMLinkPreview_Preview_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMLinkPreview_Preview_OneOfCase_Article = 3,
};

typedef GPB_ENUM(ZMLinkPreview_MetaData_OneOfCase) {
  ZMLinkPreview_MetaData_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMLinkPreview_MetaData_OneOfCase_Tweet = 9,
};

@interface ZMLinkPreview : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;
/** Test to see if @c URL has been set. */
@property(nonatomic, readwrite) BOOL hasURL;

/** url offset from beginning of text message */
@property(nonatomic, readwrite) int32_t URLOffset;

@property(nonatomic, readwrite) BOOL hasURLOffset;
@property(nonatomic, readonly) ZMLinkPreview_Preview_OneOfCase previewOneOfCase;

/** deprecated - use meta_data */
@property(nonatomic, readwrite, strong, null_resettable) ZMArticle *article;

@property(nonatomic, readwrite, copy, null_resettable) NSString *permanentURL;
/** Test to see if @c permanentURL has been set. */
@property(nonatomic, readwrite) BOOL hasPermanentURL;

@property(nonatomic, readwrite, copy, null_resettable) NSString *title;
/** Test to see if @c title has been set. */
@property(nonatomic, readwrite) BOOL hasTitle;

@property(nonatomic, readwrite, copy, null_resettable) NSString *summary;
/** Test to see if @c summary has been set. */
@property(nonatomic, readwrite) BOOL hasSummary;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset *image;
/** Test to see if @c image has been set. */
@property(nonatomic, readwrite) BOOL hasImage;

@property(nonatomic, readonly) ZMLinkPreview_MetaData_OneOfCase metaDataOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ZMTweet *tweet;

@end

/**
 * Clears whatever value was set for the oneof 'preview'.
 **/
void ZMLinkPreview_ClearPreviewOneOfCase(ZMLinkPreview *message);
/**
 * Clears whatever value was set for the oneof 'metaData'.
 **/
void ZMLinkPreview_ClearMetaDataOneOfCase(ZMLinkPreview *message);

#pragma mark - ZMTweet

typedef GPB_ENUM(ZMTweet_FieldNumber) {
  ZMTweet_FieldNumber_Author = 1,
  ZMTweet_FieldNumber_Username = 2,
};

@interface ZMTweet : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *author;
/** Test to see if @c author has been set. */
@property(nonatomic, readwrite) BOOL hasAuthor;

@property(nonatomic, readwrite, copy, null_resettable) NSString *username;
/** Test to see if @c username has been set. */
@property(nonatomic, readwrite) BOOL hasUsername;

@end

#pragma mark - ZMArticle

typedef GPB_ENUM(ZMArticle_FieldNumber) {
  ZMArticle_FieldNumber_PermanentURL = 1,
  ZMArticle_FieldNumber_Title = 2,
  ZMArticle_FieldNumber_Summary = 3,
  ZMArticle_FieldNumber_Image = 4,
};

/**
 * deprecated - use the additional fields in LinkPreview
 **/
@interface ZMArticle : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *permanentURL;
/** Test to see if @c permanentURL has been set. */
@property(nonatomic, readwrite) BOOL hasPermanentURL;

@property(nonatomic, readwrite, copy, null_resettable) NSString *title;
/** Test to see if @c title has been set. */
@property(nonatomic, readwrite) BOOL hasTitle;

@property(nonatomic, readwrite, copy, null_resettable) NSString *summary;
/** Test to see if @c summary has been set. */
@property(nonatomic, readwrite) BOOL hasSummary;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset *image;
/** Test to see if @c image has been set. */
@property(nonatomic, readwrite) BOOL hasImage;

@end

#pragma mark - ZMMention

typedef GPB_ENUM(ZMMention_FieldNumber) {
  ZMMention_FieldNumber_Start = 1,
  ZMMention_FieldNumber_Length = 2,
  ZMMention_FieldNumber_UserId = 3,
};

typedef GPB_ENUM(ZMMention_MentionType_OneOfCase) {
  ZMMention_MentionType_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMMention_MentionType_OneOfCase_UserId = 3,
};

@interface ZMMention : GPBMessage

/** offset from beginning of the message counting in utf16 characters */
@property(nonatomic, readwrite) int32_t start;

@property(nonatomic, readwrite) BOOL hasStart;
@property(nonatomic, readwrite) int32_t length;

@property(nonatomic, readwrite) BOOL hasLength;
@property(nonatomic, readonly) ZMMention_MentionType_OneOfCase mentionTypeOneOfCase;

@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

/**
 * Clears whatever value was set for the oneof 'mentionType'.
 **/
void ZMMention_ClearMentionTypeOneOfCase(ZMMention *message);

#pragma mark - ZMLastRead

typedef GPB_ENUM(ZMLastRead_FieldNumber) {
  ZMLastRead_FieldNumber_ConversationId = 1,
  ZMLastRead_FieldNumber_LastReadTimestamp = 2,
};

@interface ZMLastRead : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *conversationId;
/** Test to see if @c conversationId has been set. */
@property(nonatomic, readwrite) BOOL hasConversationId;

@property(nonatomic, readwrite) int64_t lastReadTimestamp;

@property(nonatomic, readwrite) BOOL hasLastReadTimestamp;
@end

#pragma mark - ZMCleared

typedef GPB_ENUM(ZMCleared_FieldNumber) {
  ZMCleared_FieldNumber_ConversationId = 1,
  ZMCleared_FieldNumber_ClearedTimestamp = 2,
};

@interface ZMCleared : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *conversationId;
/** Test to see if @c conversationId has been set. */
@property(nonatomic, readwrite) BOOL hasConversationId;

@property(nonatomic, readwrite) int64_t clearedTimestamp;

@property(nonatomic, readwrite) BOOL hasClearedTimestamp;
@end

#pragma mark - ZMMessageHide

typedef GPB_ENUM(ZMMessageHide_FieldNumber) {
  ZMMessageHide_FieldNumber_ConversationId = 1,
  ZMMessageHide_FieldNumber_MessageId = 2,
};

@interface ZMMessageHide : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *conversationId;
/** Test to see if @c conversationId has been set. */
@property(nonatomic, readwrite) BOOL hasConversationId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *messageId;
/** Test to see if @c messageId has been set. */
@property(nonatomic, readwrite) BOOL hasMessageId;

@end

#pragma mark - ZMMessageDelete

typedef GPB_ENUM(ZMMessageDelete_FieldNumber) {
  ZMMessageDelete_FieldNumber_MessageId = 1,
};

@interface ZMMessageDelete : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *messageId;
/** Test to see if @c messageId has been set. */
@property(nonatomic, readwrite) BOOL hasMessageId;

@end

#pragma mark - ZMMessageEdit

typedef GPB_ENUM(ZMMessageEdit_FieldNumber) {
  ZMMessageEdit_FieldNumber_ReplacingMessageId = 1,
  ZMMessageEdit_FieldNumber_Text = 2,
};

typedef GPB_ENUM(ZMMessageEdit_Content_OneOfCase) {
  ZMMessageEdit_Content_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMMessageEdit_Content_OneOfCase_Text = 2,
};

@interface ZMMessageEdit : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *replacingMessageId;
/** Test to see if @c replacingMessageId has been set. */
@property(nonatomic, readwrite) BOOL hasReplacingMessageId;

@property(nonatomic, readonly) ZMMessageEdit_Content_OneOfCase contentOneOfCase;

/** Reply can also be edited, but the edit will only affect the Text part */
@property(nonatomic, readwrite, strong, null_resettable) ZMText *text;

@end

/**
 * Clears whatever value was set for the oneof 'content'.
 **/
void ZMMessageEdit_ClearContentOneOfCase(ZMMessageEdit *message);

#pragma mark - ZMQuote

typedef GPB_ENUM(ZMQuote_FieldNumber) {
  ZMQuote_FieldNumber_QuotedMessageId = 1,
  ZMQuote_FieldNumber_QuotedMessageSha256 = 2,
};

@interface ZMQuote : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *quotedMessageId;
/** Test to see if @c quotedMessageId has been set. */
@property(nonatomic, readwrite) BOOL hasQuotedMessageId;

@property(nonatomic, readwrite, copy, null_resettable) NSData *quotedMessageSha256;
/** Test to see if @c quotedMessageSha256 has been set. */
@property(nonatomic, readwrite) BOOL hasQuotedMessageSha256;

@end

#pragma mark - ZMConfirmation

typedef GPB_ENUM(ZMConfirmation_FieldNumber) {
  ZMConfirmation_FieldNumber_FirstMessageId = 1,
  ZMConfirmation_FieldNumber_Type = 2,
  ZMConfirmation_FieldNumber_MoreMessageIdsArray = 3,
};

@interface ZMConfirmation : GPBMessage

@property(nonatomic, readwrite) ZMConfirmation_Type type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *firstMessageId;
/** Test to see if @c firstMessageId has been set. */
@property(nonatomic, readwrite) BOOL hasFirstMessageId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *moreMessageIdsArray;
/** The number of items in @c moreMessageIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger moreMessageIdsArray_Count;

@end

#pragma mark - ZMLocation

typedef GPB_ENUM(ZMLocation_FieldNumber) {
  ZMLocation_FieldNumber_Longitude = 1,
  ZMLocation_FieldNumber_Latitude = 2,
  ZMLocation_FieldNumber_Name = 3,
  ZMLocation_FieldNumber_Zoom = 4,
  ZMLocation_FieldNumber_ExpectsReadConfirmation = 5,
  ZMLocation_FieldNumber_SentToLegalHold = 6,
};

@interface ZMLocation : GPBMessage

@property(nonatomic, readwrite) float longitude;

@property(nonatomic, readwrite) BOOL hasLongitude;
@property(nonatomic, readwrite) float latitude;

@property(nonatomic, readwrite) BOOL hasLatitude;
/** location description/name */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** google maps zoom level (check maps api documentation) */
@property(nonatomic, readwrite) int32_t zoom;

@property(nonatomic, readwrite) BOOL hasZoom;
/** whether the sender is expecting to receive a read confirmation */
@property(nonatomic, readwrite) BOOL expectsReadConfirmation;

@property(nonatomic, readwrite) BOOL hasExpectsReadConfirmation;
/** whether a user in the conversation is under legal hold */
@property(nonatomic, readwrite) BOOL sentToLegalHold;

@property(nonatomic, readwrite) BOOL hasSentToLegalHold;
@end

#pragma mark - ZMImageAsset

typedef GPB_ENUM(ZMImageAsset_FieldNumber) {
  ZMImageAsset_FieldNumber_Tag = 1,
  ZMImageAsset_FieldNumber_Width = 2,
  ZMImageAsset_FieldNumber_Height = 3,
  ZMImageAsset_FieldNumber_OriginalWidth = 4,
  ZMImageAsset_FieldNumber_OriginalHeight = 5,
  ZMImageAsset_FieldNumber_MimeType = 6,
  ZMImageAsset_FieldNumber_Size = 7,
  ZMImageAsset_FieldNumber_OtrKey = 8,
  ZMImageAsset_FieldNumber_MacKey = 9,
  ZMImageAsset_FieldNumber_Mac = 10,
  ZMImageAsset_FieldNumber_Sha256 = 11,
};

/**
 * deprecated in favour of Asset.Original.ImageMetaData
 **/
@interface ZMImageAsset : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *tag;
/** Test to see if @c tag has been set. */
@property(nonatomic, readwrite) BOOL hasTag;

@property(nonatomic, readwrite) int32_t width;

@property(nonatomic, readwrite) BOOL hasWidth;
@property(nonatomic, readwrite) int32_t height;

@property(nonatomic, readwrite) BOOL hasHeight;
@property(nonatomic, readwrite) int32_t originalWidth;

@property(nonatomic, readwrite) BOOL hasOriginalWidth;
@property(nonatomic, readwrite) int32_t originalHeight;

@property(nonatomic, readwrite) BOOL hasOriginalHeight;
@property(nonatomic, readwrite, copy, null_resettable) NSString *mimeType;
/** Test to see if @c mimeType has been set. */
@property(nonatomic, readwrite) BOOL hasMimeType;

@property(nonatomic, readwrite) int32_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@property(nonatomic, readwrite, copy, null_resettable) NSData *otrKey;
/** Test to see if @c otrKey has been set. */
@property(nonatomic, readwrite) BOOL hasOtrKey;

/** deprecated - use sha256 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *macKey;
/** Test to see if @c macKey has been set. */
@property(nonatomic, readwrite) BOOL hasMacKey;

/** deprecated - use sha256 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *mac;
/** Test to see if @c mac has been set. */
@property(nonatomic, readwrite) BOOL hasMac;

/** sha256 of ciphertext */
@property(nonatomic, readwrite, copy, null_resettable) NSData *sha256;
/** Test to see if @c sha256 has been set. */
@property(nonatomic, readwrite) BOOL hasSha256;

@end

#pragma mark - ZMAsset

typedef GPB_ENUM(ZMAsset_FieldNumber) {
  ZMAsset_FieldNumber_Original = 1,
  ZMAsset_FieldNumber_NotUploaded = 3,
  ZMAsset_FieldNumber_Uploaded = 4,
  ZMAsset_FieldNumber_Preview = 5,
  ZMAsset_FieldNumber_ExpectsReadConfirmation = 6,
  ZMAsset_FieldNumber_SentToLegalHold = 7,
};

typedef GPB_ENUM(ZMAsset_Status_OneOfCase) {
  ZMAsset_Status_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMAsset_Status_OneOfCase_NotUploaded = 3,
  ZMAsset_Status_OneOfCase_Uploaded = 4,
};

@interface ZMAsset : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_Original *original;
/** Test to see if @c original has been set. */
@property(nonatomic, readwrite) BOOL hasOriginal;

/** optional Preview preview = 2;  // deprecated - preview was completely replaced */
@property(nonatomic, readonly) ZMAsset_Status_OneOfCase statusOneOfCase;

@property(nonatomic, readwrite) ZMAsset_NotUploaded notUploaded;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_RemoteData *uploaded;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_Preview *preview;
/** Test to see if @c preview has been set. */
@property(nonatomic, readwrite) BOOL hasPreview;

/** whether the sender is expecting to receive a read confirmation */
@property(nonatomic, readwrite) BOOL expectsReadConfirmation;

@property(nonatomic, readwrite) BOOL hasExpectsReadConfirmation;
/** whether a user in the conversation is under legal hold */
@property(nonatomic, readwrite) BOOL sentToLegalHold;

@property(nonatomic, readwrite) BOOL hasSentToLegalHold;
@end

/**
 * Clears whatever value was set for the oneof 'status'.
 **/
void ZMAsset_ClearStatusOneOfCase(ZMAsset *message);

#pragma mark - ZMAsset_Original

typedef GPB_ENUM(ZMAsset_Original_FieldNumber) {
  ZMAsset_Original_FieldNumber_MimeType = 1,
  ZMAsset_Original_FieldNumber_Size = 2,
  ZMAsset_Original_FieldNumber_Name = 3,
  ZMAsset_Original_FieldNumber_Image = 4,
  ZMAsset_Original_FieldNumber_Video = 5,
  ZMAsset_Original_FieldNumber_Audio = 6,
  ZMAsset_Original_FieldNumber_Source = 7,
  ZMAsset_Original_FieldNumber_Caption = 8,
};

typedef GPB_ENUM(ZMAsset_Original_MetaData_OneOfCase) {
  ZMAsset_Original_MetaData_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMAsset_Original_MetaData_OneOfCase_Image = 4,
  ZMAsset_Original_MetaData_OneOfCase_Video = 5,
  ZMAsset_Original_MetaData_OneOfCase_Audio = 6,
};

@interface ZMAsset_Original : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *mimeType;
/** Test to see if @c mimeType has been set. */
@property(nonatomic, readwrite) BOOL hasMimeType;

@property(nonatomic, readwrite) uint64_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readonly) ZMAsset_Original_MetaData_OneOfCase metaDataOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_ImageMetaData *image;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_VideoMetaData *video;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_AudioMetaData *audio;

/** link to source e.g. http://giphy.com/234245 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *source;
/** Test to see if @c source has been set. */
@property(nonatomic, readwrite) BOOL hasSource;

/** caption of the asset, e.g. "dog" for a Giphy "dog" search result */
@property(nonatomic, readwrite, copy, null_resettable) NSString *caption;
/** Test to see if @c caption has been set. */
@property(nonatomic, readwrite) BOOL hasCaption;

@end

/**
 * Clears whatever value was set for the oneof 'metaData'.
 **/
void ZMAsset_Original_ClearMetaDataOneOfCase(ZMAsset_Original *message);

#pragma mark - ZMAsset_Preview

typedef GPB_ENUM(ZMAsset_Preview_FieldNumber) {
  ZMAsset_Preview_FieldNumber_MimeType = 1,
  ZMAsset_Preview_FieldNumber_Size = 2,
  ZMAsset_Preview_FieldNumber_Remote = 3,
  ZMAsset_Preview_FieldNumber_Image = 4,
};

typedef GPB_ENUM(ZMAsset_Preview_MetaData_OneOfCase) {
  ZMAsset_Preview_MetaData_OneOfCase_GPBUnsetOneOfCase = 0,
  ZMAsset_Preview_MetaData_OneOfCase_Image = 4,
};

@interface ZMAsset_Preview : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *mimeType;
/** Test to see if @c mimeType has been set. */
@property(nonatomic, readwrite) BOOL hasMimeType;

@property(nonatomic, readwrite) uint64_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_RemoteData *remote;
/** Test to see if @c remote has been set. */
@property(nonatomic, readwrite) BOOL hasRemote;

@property(nonatomic, readonly) ZMAsset_Preview_MetaData_OneOfCase metaDataOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ZMAsset_ImageMetaData *image;

@end

/**
 * Clears whatever value was set for the oneof 'metaData'.
 **/
void ZMAsset_Preview_ClearMetaDataOneOfCase(ZMAsset_Preview *message);

#pragma mark - ZMAsset_ImageMetaData

typedef GPB_ENUM(ZMAsset_ImageMetaData_FieldNumber) {
  ZMAsset_ImageMetaData_FieldNumber_Width = 1,
  ZMAsset_ImageMetaData_FieldNumber_Height = 2,
  ZMAsset_ImageMetaData_FieldNumber_Tag = 3,
};

@interface ZMAsset_ImageMetaData : GPBMessage

@property(nonatomic, readwrite) int32_t width;

@property(nonatomic, readwrite) BOOL hasWidth;
@property(nonatomic, readwrite) int32_t height;

@property(nonatomic, readwrite) BOOL hasHeight;
@property(nonatomic, readwrite, copy, null_resettable) NSString *tag;
/** Test to see if @c tag has been set. */
@property(nonatomic, readwrite) BOOL hasTag;

@end

#pragma mark - ZMAsset_VideoMetaData

typedef GPB_ENUM(ZMAsset_VideoMetaData_FieldNumber) {
  ZMAsset_VideoMetaData_FieldNumber_Width = 1,
  ZMAsset_VideoMetaData_FieldNumber_Height = 2,
  ZMAsset_VideoMetaData_FieldNumber_DurationInMillis = 3,
};

@interface ZMAsset_VideoMetaData : GPBMessage

@property(nonatomic, readwrite) int32_t width;

@property(nonatomic, readwrite) BOOL hasWidth;
@property(nonatomic, readwrite) int32_t height;

@property(nonatomic, readwrite) BOOL hasHeight;
@property(nonatomic, readwrite) uint64_t durationInMillis;

@property(nonatomic, readwrite) BOOL hasDurationInMillis;
@end

#pragma mark - ZMAsset_AudioMetaData

typedef GPB_ENUM(ZMAsset_AudioMetaData_FieldNumber) {
  ZMAsset_AudioMetaData_FieldNumber_DurationInMillis = 1,
  ZMAsset_AudioMetaData_FieldNumber_NormalizedLoudness = 3,
};

@interface ZMAsset_AudioMetaData : GPBMessage

@property(nonatomic, readwrite) uint64_t durationInMillis;

@property(nonatomic, readwrite) BOOL hasDurationInMillis;
/** repeated float normalized_loudness = 2 [packed=true]; // deprecated - Switched to bytes instead */
@property(nonatomic, readwrite, copy, null_resettable) NSData *normalizedLoudness;
/** Test to see if @c normalizedLoudness has been set. */
@property(nonatomic, readwrite) BOOL hasNormalizedLoudness;

@end

#pragma mark - ZMAsset_RemoteData

typedef GPB_ENUM(ZMAsset_RemoteData_FieldNumber) {
  ZMAsset_RemoteData_FieldNumber_OtrKey = 1,
  ZMAsset_RemoteData_FieldNumber_Sha256 = 2,
  ZMAsset_RemoteData_FieldNumber_AssetId = 3,
  ZMAsset_RemoteData_FieldNumber_AssetToken = 5,
  ZMAsset_RemoteData_FieldNumber_Encryption = 6,
};

@interface ZMAsset_RemoteData : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *otrKey;
/** Test to see if @c otrKey has been set. */
@property(nonatomic, readwrite) BOOL hasOtrKey;

/** obsolete but required for backward compatibility */
@property(nonatomic, readwrite, copy, null_resettable) NSData *sha256;
/** Test to see if @c sha256 has been set. */
@property(nonatomic, readwrite) BOOL hasSha256;

@property(nonatomic, readwrite, copy, null_resettable) NSString *assetId;
/** Test to see if @c assetId has been set. */
@property(nonatomic, readwrite) BOOL hasAssetId;

/** optional bytes asset_token = 4; // deprecated - changed type to string */
@property(nonatomic, readwrite, copy, null_resettable) NSString *assetToken;
/** Test to see if @c assetToken has been set. */
@property(nonatomic, readwrite) BOOL hasAssetToken;

@property(nonatomic, readwrite) ZMEncryptionAlgorithm encryption;

@property(nonatomic, readwrite) BOOL hasEncryption;
@end

#pragma mark - ZMExternal

typedef GPB_ENUM(ZMExternal_FieldNumber) {
  ZMExternal_FieldNumber_OtrKey = 1,
  ZMExternal_FieldNumber_Sha256 = 2,
  ZMExternal_FieldNumber_Encryption = 3,
};

/**
 * Actual message is encrypted with AES and sent as additional data
 **/
@interface ZMExternal : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *otrKey;
/** Test to see if @c otrKey has been set. */
@property(nonatomic, readwrite) BOOL hasOtrKey;

/** sha256 of ciphertext, obsolete but required for backward compatibility */
@property(nonatomic, readwrite, copy, null_resettable) NSData *sha256;
/** Test to see if @c sha256 has been set. */
@property(nonatomic, readwrite) BOOL hasSha256;

@property(nonatomic, readwrite) ZMEncryptionAlgorithm encryption;

@property(nonatomic, readwrite) BOOL hasEncryption;
@end

#pragma mark - ZMReaction

typedef GPB_ENUM(ZMReaction_FieldNumber) {
  ZMReaction_FieldNumber_Emoji = 1,
  ZMReaction_FieldNumber_MessageId = 2,
};

@interface ZMReaction : GPBMessage

/** some emoji reaction or the empty string to remove previous reaction(s) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *emoji;
/** Test to see if @c emoji has been set. */
@property(nonatomic, readwrite) BOOL hasEmoji;

@property(nonatomic, readwrite, copy, null_resettable) NSString *messageId;
/** Test to see if @c messageId has been set. */
@property(nonatomic, readwrite) BOOL hasMessageId;

@end

#pragma mark - ZMCalling

typedef GPB_ENUM(ZMCalling_FieldNumber) {
  ZMCalling_FieldNumber_Content = 1,
};

@interface ZMCalling : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *content;
/** Test to see if @c content has been set. */
@property(nonatomic, readwrite) BOOL hasContent;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
