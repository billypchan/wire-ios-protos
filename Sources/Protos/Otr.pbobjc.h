//
// Wire
// Copyright (C) 2019 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: otr.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ZMClientEntry;
@class ZMClientId;
@class ZMUserEntry;
@class ZMUserId;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ZMOtrRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ZMOtrRoot : GPBRootObject
@end

#pragma mark - ZMUserId

typedef GPB_ENUM(ZMUserId_FieldNumber) {
  ZMUserId_FieldNumber_Uuid = 1,
};

@interface ZMUserId : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@end

#pragma mark - ZMClientId

typedef GPB_ENUM(ZMClientId_FieldNumber) {
  ZMClientId_FieldNumber_Client = 1,
};

@interface ZMClientId : GPBMessage

@property(nonatomic, readwrite) uint64_t client;

@property(nonatomic, readwrite) BOOL hasClient;
@end

#pragma mark - ZMClientEntry

typedef GPB_ENUM(ZMClientEntry_FieldNumber) {
  ZMClientEntry_FieldNumber_Client = 1,
  ZMClientEntry_FieldNumber_Text = 2,
};

@interface ZMClientEntry : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZMClientId *client;
/** Test to see if @c client has been set. */
@property(nonatomic, readwrite) BOOL hasClient;

@property(nonatomic, readwrite, copy, null_resettable) NSData *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@end

#pragma mark - ZMUserEntry

typedef GPB_ENUM(ZMUserEntry_FieldNumber) {
  ZMUserEntry_FieldNumber_User = 1,
  ZMUserEntry_FieldNumber_ClientsArray = 2,
};

@interface ZMUserEntry : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZMUserId *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZMClientEntry*> *clientsArray;
/** The number of items in @c clientsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger clientsArray_Count;

@end

#pragma mark - ZMNewOtrMessage

typedef GPB_ENUM(ZMNewOtrMessage_FieldNumber) {
  ZMNewOtrMessage_FieldNumber_Sender = 1,
  ZMNewOtrMessage_FieldNumber_RecipientsArray = 2,
  ZMNewOtrMessage_FieldNumber_NativePush = 3,
  ZMNewOtrMessage_FieldNumber_Blob = 4,
};

@interface ZMNewOtrMessage : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZMClientId *sender;
/** Test to see if @c sender has been set. */
@property(nonatomic, readwrite) BOOL hasSender;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZMUserEntry*> *recipientsArray;
/** The number of items in @c recipientsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger recipientsArray_Count;

@property(nonatomic, readwrite) BOOL nativePush;

@property(nonatomic, readwrite) BOOL hasNativePush;
@property(nonatomic, readwrite, copy, null_resettable) NSData *blob;
/** Test to see if @c blob has been set. */
@property(nonatomic, readwrite) BOOL hasBlob;

@end

#pragma mark - ZMOtrAssetMeta

typedef GPB_ENUM(ZMOtrAssetMeta_FieldNumber) {
  ZMOtrAssetMeta_FieldNumber_Sender = 1,
  ZMOtrAssetMeta_FieldNumber_RecipientsArray = 2,
  ZMOtrAssetMeta_FieldNumber_IsInline = 3,
  ZMOtrAssetMeta_FieldNumber_NativePush = 4,
};

@interface ZMOtrAssetMeta : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZMClientId *sender;
/** Test to see if @c sender has been set. */
@property(nonatomic, readwrite) BOOL hasSender;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZMUserEntry*> *recipientsArray;
/** The number of items in @c recipientsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger recipientsArray_Count;

@property(nonatomic, readwrite) BOOL isInline;

@property(nonatomic, readwrite) BOOL hasIsInline;
@property(nonatomic, readwrite) BOOL nativePush;

@property(nonatomic, readwrite) BOOL hasNativePush;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
